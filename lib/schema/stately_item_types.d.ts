// @generated by Stately. DO NOT EDIT.
/* eslint-disable */

import type { DatabaseClient as GenericDatabaseClient, StoreID, ClientFactory, ClientOptions, Item, ItemInit } from "@stately-cloud/client";
import type {
  Channel,
  Character,
  Show,
  ChannelSchema,
  CharacterSchema,
  ShowSchema,
} from "./stately_pb.js";

export declare const itemTypeToSchema: {
  "Channel": typeof ChannelSchema,
  "Character": typeof CharacterSchema,
  "Show": typeof ShowSchema,
};

// AllItemTypes is a convenience type that represents all item type names in your schema.
export type AllItemTypes =
  | "Channel"
  | "Character"
  | "Show";

// AnyItem is a convenience type that represents any item shape in your schema.
export type AnyItem =
  | Channel
  | Character
  | Show;

type TypeMap = typeof itemTypeToSchema;

// DatabaseClient is a database client that has been customized with your schema.
export type DatabaseClient = GenericDatabaseClient<TypeMap, AllItemTypes>;

/**
 * Create a new DatabaseClient bound to your schema that allows operations against
 * stores that use that schema.
 * @example
 * import { createClient } from "./my_schema";
*  import { nodeTransport } from "@stately-cloud/client/node";
 * const client = createClient({ storeId: 1221515n, transport: nodeTransport });
 * const item = await client.get("Equipment", "/jedi-luke/equipment-lightsaber");
 * @private this is used by the generated code and should not be called directly.
 */
export declare function createClient(options: ClientOptions): DatabaseClient;

/**
 * create builds a new item of the specified type. You *must* use this
 * function to create items so that they have the proper metadata for the
 * client to use them.
 * @param typeName - One of the itemType or objectType names from your schema.
 * @param init - The initial data for the item. Any values that aren't set
 * here will be set to their zero value.
 */
export declare function create<T extends keyof TypeMap>(
  typeName: T,
  init?: ItemInit<TypeMap, T>,
): Item<TypeMap, T>;
